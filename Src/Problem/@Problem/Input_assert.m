function n_eval = Input_assert( obj, x_eval )
    %INPUT_ASSERT Check inputs before evaluation
    %   *x_eval is the matrix of input points to assert
    %
    % Syntax :
    % n_eval = obj.Input_assert( x_eval );

    [ n_eval, m_eval ] = size( x_eval );

    assert( m_eval == obj.m_x, ...
        'SBDOT:Problem:dimension_input', ...
        ['The dimension of your evaluation points is not equal to ', ...
        num2str( obj.m_x ), ', check input matrix number of columns.']);

    assert( any( all( bsxfun( @ge, x_eval, obj.lb), 2 ) ...
                 & ...
                 all( bsxfun( @le, x_eval, obj.ub), 2 ) ...
                ), ...
        'SBDOT:Problem:eval_bound',...
        'At least one of your evaluation points is out of bounds.');

    assert( size( unique( x_eval, 'rows' ), 1 ) == n_eval, ...
        'SBDOT:Problem:eval_notunique', ...
        'You are trying to evaluate the same points multiple times.');

    if ~isempty( obj.x )

        assert( all ( ~ismembertol( obj.x, x_eval, obj.Tol_eval, 'Byrows', true) ), ...
            'SBDOT:Problem:already_eval', ...
            'At least one of your evaluation points is too closed from training dataset points.');

    end

end

